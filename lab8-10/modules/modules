from random import randrange as rnd, choice
import math
import constants as const

class ball():
	def __init__(self, x=40, y=450):
		""" Конструктор класса ball
		Args:
		x - начальное положение мяча по горизонтали
		y - начальное положение мяча по вертикали
		"""
		self.x = x
		self.y = y
		self.r = 10
		self.vx = 0
		self.vy = 0
		self.color = choice(['blue', 'green', 'red', 'brown'])
		self.id = canv.create_oval(
			self.x - self.r,
			self.y - self.r,
			self.x + self.r,
			self.y + self.r,
			fill=self.color
		)
		self.live = 30

	def set_coords(self):
		canv.coords(
			self.id,
			self.x - self.r,
			self.y - self.r,
			self.x + self.r,
			self.y + self.r
		)

	def move(self):
		"""Переместить мяч по прошествии единицы времени.
		Метод описывает перемещение мяча за один кадр перерисовки. То есть, обновляет значения
		self.x и self.y с учетом скоростей self.vx и self.vy, силы гравитации, действующей на мяч,
		и стен по краям окна (размер окна 800х600).
		"""
		if (self.x + self.r > 800 and self.vx > 0) or (self.x - self.r < 0 and self.vx < 0):  # отскок мяча
			self.vx = -self.vx
		if (self.y + self.r > 550 and self.vy < 0) or (self.y - self.r < 0 and self.vy > 0):
			self.vy = -self.vy
		self.vy = self.vy - const.g  # гравитация
		self.x += self.vx
		self.y += -self.vy
		self.vx -= self.vx / 100  # вязкое трение
		self.vy -= self.vy / 100

	def hittest(self, obj):
		"""Функция проверяет сталкивалкивается ли данный обьект с целью, описываемой в обьекте obj.
		Args:
			obj: Обьект, с которым проверяется столкновение.
		Returns:
			Возвращает True в случае столкновения мяча и цели. В противном случае возвращает False.
		"""
		if ((self.x - obj.x) ** 2 + (self.y - obj.y) ** 2 < (self.r + obj.r) ** 2):
			return True

	def __del__(self):
		canv.delete(self.id)

bullet = 0
balls = []

class gun():
	def __init__(self):
		self.f2_power = 10
		self.f2_on = 0
		self.an = 1
		self.id = canv.create_line(20, 450, 50, 420, width=7)

	def fire2_start(self, event):
		self.f2_on = 1

	def fire2_end(self, event):
		"""Выстрел мячом.
		Происходит при отпускании кнопки мыши.
		Начальные значения компонент скорости мяча vx и vy зависят от положения мыши.
		"""
		global balls, bullet
		bullet += 1
		new_ball = ball()
		new_ball.r += 5
		self.an = math.atan((event.y - new_ball.y) / (event.x - new_ball.x))
		new_ball.vx = self.f2_power * math.cos(self.an)
		new_ball.vy = - self.f2_power * math.sin(self.an)
		balls += [new_ball]
		self.f2_on = 0
		self.f2_power = 10

	def targetting(self, event=0):
		"""Прицеливание. Зависит от положения мыши."""
		if event:
			self.an = math.atan((event.y - 450) / (event.x - 20))
		if self.f2_on:
			canv.itemconfig(self.id, fill='orange')
		else:
			canv.itemconfig(self.id, fill='black')
		canv.coords(self.id, 20, 450,
					20 + max(self.f2_power, 20) * math.cos(self.an),
					450 + max(self.f2_power, 20) * math.sin(self.an)
					)

	def power_up(self):
		if self.f2_on:
			if self.f2_power < 100:
				self.f2_power += 1
			canv.itemconfig(self.id, fill='orange')
		else:
			canv.itemconfig(self.id, fill='black')

points = 0 #количество очков
class target(ball): #наследование атрибутов класса ball

	def __init__(self):
		self.points = 0
		self.live = 1
		self.id = canv.create_oval(0, 0, 0, 0)
		self.new_target()

	def new_target(self):
		""" Инициализация новой цели. """
		x = self.x = rnd(600, 750)
		y = self.y = rnd(300, 500)
		r = self.r = rnd(2, 50)
		self.ux = rnd(-20, 0)
		self.uy = rnd(-20, 0)
		color = self.color = 'red'
		canv.coords(self.id, x - r, y - r, x + r, y + r)
		canv.itemconfig(self.id, fill=color)

	def move(self):
		self.x += self.ux
		self.y += self.uy
		if self.x+self.r > 800 or self.x-self.r < 0:  # отскок мишени
			self.ux = -self.ux
		if self.y-self.r < 0 or self.y+self.r > 550:
			self.uy = -self.uy

	def hit(self):
		"""Попадание шарика в цель."""
		global points
		canv.coords(self.id, -10, -10, -10, -10)
		points += const.point #прибавление очков за уничтоженную цель
